{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Coding School's 2020 Quantum Computing Summer Camp\n",
    "Day 3: Introduction to Quantum Computing I \\\n",
    "July 15th 2020 \\\n",
    "Hands-on activity"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Basics of Quantum Computing\n",
    "Quantum computers have access to certain gates that perform unitary evolutions on collections of two-level systems (spin-1/2 particles, for example). \\\n",
    "Let's review the 1-qubit $\\textbf{quantum gates}$ we have learned so far. \\\n",
    "\\\n",
    "Hadamard gate\n",
    "$H = \\frac{1}{\\sqrt{2}}\\begin{pmatrix}\n",
    "1 & 1 \\\\\n",
    "1 & -1\n",
    "\\end{pmatrix}\n",
    "$\n",
    "\\\n",
    "\\\n",
    "Pauli-X gate\n",
    "$X = \\begin{pmatrix}\n",
    "0 & 1 \\\\\n",
    "0 & 1\n",
    "\\end{pmatrix}\n",
    "$ \n",
    "\\\n",
    "\\\n",
    "Pauli-Y gate\n",
    "$Y = \\begin{pmatrix}\n",
    "0 & -i \\\\\n",
    "i & 0\n",
    "\\end{pmatrix}\n",
    "$ \n",
    "\\\n",
    "\\\n",
    "Pauli-Z gate\n",
    "$Z = \\begin{pmatrix}\n",
    "1 & 0 \\\\\n",
    "0 & -1\n",
    "\\end{pmatrix}\n",
    "$ \n",
    "\\\n",
    "\\\n",
    "S gate\n",
    "$S = \\begin{pmatrix}\n",
    "1 & 0 \\\\\n",
    "0 & i\n",
    "\\end{pmatrix}\n",
    "$ \n",
    "\\\n",
    "\\\n",
    "T gate\n",
    "$T = \\begin{pmatrix}\n",
    "1 & 0 \\\\\n",
    "0 & e^{i\\frac{\\pi}{4}}\n",
    "\\end{pmatrix}\n",
    "$\n",
    "\\\n",
    "\\\n",
    "We also have 2-qubit gates such as the CNOT (controlled-not), that either flips or not the state of one qubit in function of the direction of the spin of the control qubit.\n",
    "$$CNOT(\\left|0\\right\\rangle\\otimes\\left|0\\right\\rangle) = \\left|0\\right\\rangle \\otimes \\left|0\\right\\rangle $$\n",
    "$$CNOT(\\left|0\\right\\rangle\\otimes\\left|1\\right\\rangle) = \\left|0\\right\\rangle \\otimes \\left|1\\right\\rangle $$\n",
    "$$CNOT(\\left|1\\right\\rangle\\otimes\\left|0\\right\\rangle) = \\left|1\\right\\rangle \\otimes \\left|1\\right\\rangle $$\n",
    "$$CNOT(\\left|1\\right\\rangle\\otimes\\left|1\\right\\rangle) = \\left|1\\right\\rangle \\otimes \\left|0\\right\\rangle $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# General rotations\n",
    "\n",
    "By convention, the chronology of the circuit diagram is from left to right. Other different forms of spin rotation operators that rotate quantums states to an arbitrary $(\\theta, \\phi)$ can be expressed as a combination of the gates above.\n",
    "For the sake of generality, we introduce a general rotation gate, represented in the IBM Quantum Cumpter as $u_3$. The $u_3$ takes three parameters $(\\lambda,\\theta,\\phi)$ and has the form\n",
    "\n",
    "$ u_3=\n",
    "\\begin{pmatrix}\n",
    "\\cos{\\big(\\frac{\\theta}{2}\\big)} & -e^{i\\lambda}\\sin{\\big(\\frac{\\theta}{2}\\big)}\\\\\n",
    "e^{i\\phi}\\sin{\\big(\\frac{\\theta}{2}\\big)} & e^{i(\\lambda+\\phi)}\\sin{\\big(\\frac{\\theta}{2}\\big)}\n",
    "\\end{pmatrix}\n",
    "$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Measurement and basis\n",
    "\n",
    "A quantum computer works with the conventional basis of $\\{\\left|0\\right\\rangle, \\left|1\\right\\rangle\\}$. As discussed earlier, we can measure states in different (and arbitrary) basis. We can achieve this by rotating the arbitrary basis to the $Z$ basis $\\{\\left|0\\right\\rangle, \\left|1\\right\\rangle\\}$ and performing the usual measurement. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Performing the Bell Experiment on the IBM quantum computer\n",
    "\n",
    "Consider the general state\n",
    "$$\\left|\\psi(\\theta)\\right\\rangle = \\cos{\\big(\\frac{\\theta}{2}\\big)}\\left|0\\right\\rangle\\otimes\\left|0\\right\\rangle + \\sin{\\big(\\frac{\\theta}{2}\\big)}\\left|1\\right\\rangle\\otimes\\left|1\\right\\rangle$$\n",
    "Note that when $\\theta = 0$, this is state is unentangled (state $\\left|0\\right\\rangle\\otimes\\left|0\\right\\rangle$), whereas for any $\\theta > 0$, it is entangled and for $\\theta= \\pi/2$ reduces to $\\left|\\beta_{00}\\right\\rangle$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Show that the state $\\cos{\\theta/2}\\left|0\\right\\rangle+\\sin{\\theta/2}\\left|1\\right\\rangle$ for an angle $\\theta$ using the gate $u_3(\\theta,0,0)$ with $\\left|0\\right\\rangle$ as input."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Using part (1) show that the following circuit prepares the state $\\left|\\psi(\\theta)\\right\\rangle = \\cos{\\big(\\frac{\\theta}{2}\\big)}\\left|0\\right\\rangle\\otimes\\left|0\\right\\rangle + \\sin{\\big(\\frac{\\theta}{2}\\big)}\\left|1\\right\\rangle\\otimes\\left|1\\right\\rangle$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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Hj388rH+8ZU3/XIeEdN++9ycLs3THcnXsGXLFpYvX052djbLli3rsGEaExNjUTIRe9JK5xoeeeQR1qxZwxdffMHIkSOtjvOj4fF6eWPlGi60tLBg9mRdWkmXqXSuoUePHkRGRlJeXm7k4+nySuyqq5dXeni6itraWurr67ntttusjiJy09BK5yq+/fZbIiIiSEpKYu/evVbH+dEodZfzh/c+JmdSFmnJCVbHEZvRSucq+vTpQ1xcHPv27WPjxo0dju/fv9+CVNa6dF9OZEQvUocPsTqO2JCevbqGl19+mZycHCZMmMCDDz7IkCFDOHHiBMXFxSQlJfHee+9ZHdGohnONOB0Ofq77cuQ66fKqCz766COWLFnCjh07OH/+PP369ePOO+/kmWee4Z577rE6nnFerxcv4NDrreQ6qHRExCitj0XEKJWOiBil0hERo1Q6ImKUSkdEjFLpiIhRKh0RMUqlIyJGqXRExCiVjogYpdIREaNUOiJilEpHRIxS6YiIUSodETFKpSMiRql0RMQolY6IGKXSERGjVDoiYpRKR0SMUumIiFEqHRExSqUjIkapdETEKJWOiBil0hERo/4fIf1TqkqeQMQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 358.792x204.68 with 1 Axes>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit_2 = QuantumCircuit(2, 2)\n",
    "circuit_2.u3(0,0,0,0)\n",
    "circuit_2.cx(0, 1)\n",
    "circuit_2.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Show that measurement in the $X$ basis can be achieved by first applying a Hadamard gate $H$ and then measuring in the $Z$ basis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Show that measurements in the $W=\\frac{1}{\\sqrt{2}}(X+Z)$ basis can be performed by applying the sequence $HTHS$ and then measuring in the $Z$ basis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Show that the measurement in the $V=\\frac{1}{\\sqrt{2}}(Z-X)$ basis is achieved by applying \n",
    "$HT^{\\dagger}HS$ and a $Z$ measurement. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# IBM Quantum Experience Circuit Composer\n",
    "Let's start by importing the standard Qiskit libraries and loading IBM Q account(s)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from qiskit import QuantumCircuit, execute, Aer, IBMQ\n",
    "from qiskit.compiler import transpile, assemble\n",
    "from qiskit.tools.jupyter import *\n",
    "from qiskit.visualization import *\n",
    "# Loading your IBM Q account(s)\n",
    "provider = IBMQ.load_account()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bell states \n",
    "Recall that Bell states are the sets of maximally entangled states in the two-qubit space and form a complete basis.\n",
    "$$\\left|\\beta_{00}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|0\\right\\rangle+\\left|1\\right\\rangle\\left|1\\right\\rangle)$$\n",
    "$$\\left|\\beta_{01}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|1\\right\\rangle+\\left|1\\right\\rangle\\left|0\\right\\rangle)$$\n",
    "$$\\left|\\beta_{10}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|0\\right\\rangle-\\left|1\\right\\rangle\\left|1\\right\\rangle)$$\n",
    "$$\\left|\\beta_{11}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|1\\right\\rangle-\\left|0\\right\\rangle\\left|1\\right\\rangle)$$\n",
    "\n",
    "1. See below as an example how we create the circuit that creates the $\\left|\\beta_{00}\\right\\rangle$ state using a Hadamard gate on $q[0]$ and a CNOT with the control qubit on $q[0]$, and observe the ploted statistical properties to measure each two qubit state."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total count for 00 and 11 are: {'00': 1000}\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 298.592x204.68 with 1 Axes>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a new Quantum Circuit\n",
    "circuit = QuantumCircuit(2, 2)\n",
    "# Add an H gate on qubit 0\n",
    "circuit.h(0)\n",
    "# Add a CX (CNOT) gate on control qubit 0 and target qubit 1\n",
    "circuit.cx(0, 1)\n",
    "# Map the quantum measurement to the classical bits\n",
    "# circuit.measure([0,1], [0,1])\n",
    "\n",
    "# Execute\n",
    "# Use Aer's qasm_simulator\n",
    "simulator = Aer.get_backend('qasm_simulator')\n",
    "# Execute the circuit on the qasm simulator\n",
    "job = execute(circuit, simulator, shots=1000)\n",
    "# Grab results from the job\n",
    "result = job.result()\n",
    "\n",
    "# Return counts\n",
    "counts = result.get_counts(circuit)\n",
    "print(\"\\nTotal count for 00 and 11 are:\",counts)\n",
    "\n",
    "# Draw the circuit\n",
    "circuit.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot a histogram\n",
    "plot_histogram(counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$\\textbf{Exercises}$\n",
    "2. Adapt the circuit from part (1) to produce the other three Bell states: $\\left|\\beta_{01}\\right\\rangle$, $\\left|\\beta_{10}\\right\\rangle$, $\\left|\\beta_{11}\\right\\rangle$ and plot their probability distributions in a separate histogram."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\left|\\beta_{01}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|1\\right\\rangle+\\left|1\\right\\rangle\\left|0\\right\\rangle)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Create a new circuit\n",
    "# circuit = QuantumCircuit(2, 2)\n",
    "# # Add quantum gates\n",
    "# circuit.h(0)\n",
    "# circuit.cx(0, 1)\n",
    "# # Map the quantum measurement to the classical bits\n",
    "# circuit.measure([0,1], [0,1])\n",
    "\n",
    "# # Execute\n",
    "# simulator = Aer.get_backend('qasm_simulator')\n",
    "# job = execute(circuit, simulator, shots=1000)\n",
    "# result = job.result()\n",
    "\n",
    "# # Return counts\n",
    "# counts = result.get_counts(circuit)\n",
    "# print(\"\\nTotal count for 00 and 11 are:\",counts)\n",
    "\n",
    "# # Draw the circuit\n",
    "# circuit.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\left|\\beta_{10}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|0\\right\\rangle-\\left|1\\right\\rangle\\left|1\\right\\rangle)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Create a new circuit\n",
    "# circuit = QuantumCircuit(2, 2)\n",
    "# # Add quantum gates\n",
    "# circuit.h(0)\n",
    "# circuit.cx(0, 1)\n",
    "# # Map the quantum measurement to the classical bits\n",
    "# circuit.measure([0,1], [0,1])\n",
    "\n",
    "# # Execute\n",
    "# simulator = Aer.get_backend('qasm_simulator')\n",
    "# job = execute(circuit, simulator, shots=1000)\n",
    "# result = job.result()\n",
    "\n",
    "# # Return counts\n",
    "# counts = result.get_counts(circuit)\n",
    "# print(\"\\nTotal count for 00 and 11 are:\",counts)\n",
    "\n",
    "# # Draw the circuit\n",
    "# circuit.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\\left|\\beta_{11}\\right\\rangle=\\frac{1}{\\sqrt{2}}(\\left|0\\right\\rangle\\left|1\\right\\rangle-\\left|1\\right\\rangle\\left|0\\right\\rangle)$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # Create a new circuit\n",
    "# circuit = QuantumCircuit(2, 2)\n",
    "# # Add quantum gates\n",
    "# circuit.h(0)\n",
    "# circuit.cx(0, 1)\n",
    "# # Map the quantum measurement to the classical bits\n",
    "# circuit.measure([0,1], [0,1])\n",
    "\n",
    "# # Execute\n",
    "# simulator = Aer.get_backend('qasm_simulator')\n",
    "# job = execute(circuit, simulator, shots=1000)\n",
    "# result = job.result()\n",
    "\n",
    "# # Return counts\n",
    "# counts = result.get_counts(circuit)\n",
    "# print(\"\\nTotal count for 00 and 11 are:\",counts)\n",
    "\n",
    "# # Draw the circuit\n",
    "# circuit.draw()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "# Simulation\n",
    "Log in the IBM Q Experience and draw a circuit using the following code or the $\\textit{IBM Circuit Composer}$ for preparing the state $\\left|\\psi(\\theta)\\right\\rangle$ for $\\theta = 0, \\frac{\\pi}{6}, \\frac{\\pi}{4}, \\frac{\\pi}{2}$ and performing the measurement in the $X$, $Z$, $W$ and $V$ basis. \\\n",
    "Estimate $\\langle Z\\otimes W \\rangle$, $\\langle Z\\otimes V \\rangle$, $\\langle X\\otimes V \\rangle$ and $\\langle X\\otimes W \\rangle$ for each $\\theta$. \\\n",
    "Calculate $C = \\langle Z\\otimes W \\rangle + \\langle Z\\otimes V \\rangle + \\langle X\\otimes W \\rangle - \\langle X\\otimes V \\rangle$ for each $\\theta$ and report your results in a Table. \n",
    "\\\n",
    "$\\textbf{Hint:}$ Here is the circuit diagram for measuring $\\left|\\psi(\\theta/6)\\right\\rangle$ in the $X\\otimes V$ basis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The operators $X$, $Z$, $V$ and $W$ all have $\\pm$ eigenvalues. The $0$ and $1$ correspond to the $+1$ and $-1$ eigenvalues respectively. The probability is written as $P(q[0],q[1])$.\n",
    "\n",
    "| $\\theta=$ | P(+1,+1) | P(-1,-1) | P(+1,-1) | P(-1,+1) | Expectation |\n",
    "| ----------- | ----- | ----- | ----- | ----- | ----- |\n",
    "| $ Z\\otimes W $ |  |  |  |  |  |\n",
    "| $ Z\\otimes V $ |  |  |  |  |  |\n",
    "| $ X\\otimes W $ |  |  |  |  |  |\n",
    "| $ X\\otimes V $ |  |  |  |  |  |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Total count for 00 and 11 are: {'011': 73, '001': 80, '000': 453, '010': 394}\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 719.992x264.88 with 1 Axes>"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit_sim = QuantumCircuit(3, 3)\n",
    "circuit_sim.u3(0,0,0,0)\n",
    "circuit_sim.cx(0, 1)\n",
    "circuit_sim.h(0)\n",
    "circuit_sim.s(1)\n",
    "circuit_sim.h(1)\n",
    "circuit_sim.tdg(1)\n",
    "circuit_sim.h(1)\n",
    "\n",
    "circuit_sim.measure([1,0], [0,1])\n",
    "\n",
    "simulator = Aer.get_backend('qasm_simulator')\n",
    "job = execute(circuit_sim, simulator, shots=1000)\n",
    "result = job.result()\n",
    "\n",
    "counts_sim = result.get_counts(circuit_sim)\n",
    "print(\"\\nTotal count for 00 and 11 are:\",counts_sim)\n",
    "\n",
    "circuit_sim.draw()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 504x360 with 1 Axes>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "plot_histogram(counts_sim)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Actual Computation\n",
    "In this part we run a previous measurement of your choice in the previous section on an actual quantum computer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
